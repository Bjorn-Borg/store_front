{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport Document, { Head, Main, NextScript } from \"next/document\";\nimport { useAmp } from \"next/amp\";\nimport { ServerStyleSheets } from \"@material-ui/core/styles\";\nimport theme from \"../assets/theme\";\nimport { GA_TRACKING_ID } from \"../lib/gtag\";\nimport AmpAnalytics from \"../components/amp/AmpAnalytics\";\nimport AmpOptimize from \"../components/amp/AmpOptimize\";\n\nfunction AmpWrap({\n  ampOnly,\n  nonAmp\n}) {\n  const isAmp = useAmp();\n  if (ampOnly) return isAmp && ampOnly;\n  return !isAmp && nonAmp;\n}\n\nconst experiment = {\n  FlyingButton: {\n    sticky: true,\n    variants: {\n      \"0\": 40,\n      \"1\": 50\n    }\n  }\n};\nexport default class MyDocument extends Document {\n  render() {\n    return __jsx(\"html\", null, __jsx(Head, null, __jsx(\"script\", {\n      async: true,\n      \"custom-element\": \"amp-analytics\",\n      src: \"https://cdn.ampproject.org/v0/amp-analytics-0.1.js\"\n    }), __jsx(\"script\", {\n      async: true,\n      \"custom-element\": \"amp-experiment\",\n      src: \"https://cdn.ampproject.org/v0/amp-experiment-0.1.js\"\n    }), __jsx(\"meta\", {\n      name: \"theme-color\",\n      content: theme.palette.primary.main\n    }), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n    })), __jsx(\"body\", null, __jsx(Main, null), __jsx(NextScript, null), __jsx(AmpWrap, {\n      ampOnly: (__jsx(AmpAnalytics, {\n        type: \"googleanalytics\",\n        script: {\n          vars: {\n            account: GA_TRACKING_ID,\n            gtag_id: GA_TRACKING_ID,\n            config: {\n              [GA_TRACKING_ID]: {\n                groups: \"default\"\n              }\n            }\n          },\n          requests: {\n            experiment: \"${pageview}&xid=${experiment}&xvar=${variant}\"\n          },\n          triggers: {\n            \"default pageview\": {\n              on: \"visible\",\n              request: \"experiment\",\n              vars: {\n                experiment: \"iQD4FnGfQxOBA8jC3C5Lyg\",\n                variant: \"VARIANT(flying-button)\"\n              }\n            }\n          }\n        }\n      }), __jsx(AmpOptimize, {\n        script: experiment\n      }))\n    }), __jsx(AmpWrap, {\n      nonAmp: __jsx(React.Fragment, null, __jsx(\"script\", {\n        async: true,\n        src: `https://www.googletagmanager.com/gtag/js?id=${GA_TRACKING_ID}`\n      }), __jsx(\"script\", {\n        dangerouslySetInnerHTML: {\n          __html: `\n                      window.dataLayer = window.dataLayer || [];\n                      function gtag(){dataLayer.push(arguments);}\n                      gtag('js', new Date());\n\n                      gtag('config', '${GA_TRACKING_ID}');\n                    `\n        }\n      }))\n    })));\n  }\n\n}\n\nMyDocument.getInitialProps = async ctx => {\n  // Resolution order\n  //\n  // On the server:\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. document.getInitialProps\n  // 4. app.render\n  // 5. page.render\n  // 6. document.render\n  //\n  // On the server with error:\n  // 1. document.getInitialProps\n  // 2. app.render\n  // 3. page.render\n  // 4. document.render\n  //\n  // On the client\n  // 1. app.getInitialProps\n  // 2. page.getInitialProps\n  // 3. app.render\n  // 4. page.render\n  // Render app and page and get the context of the page with collected side effects.\n  const sheets = new ServerStyleSheets();\n  const originalRenderPage = ctx.renderPage;\n\n  ctx.renderPage = () => originalRenderPage({\n    enhanceApp: App => props => sheets.collect(__jsx(App, props))\n  });\n\n  const initialProps = await Document.getInitialProps(ctx);\n  return _objectSpread({}, initialProps, {\n    // Styles fragment is rendered after the app and page rendering finish.\n    styles: [...React.Children.toArray(initialProps.styles), sheets.getStyleElement()]\n  });\n};","map":null,"metadata":{},"sourceType":"module"}